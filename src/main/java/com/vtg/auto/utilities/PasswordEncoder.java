/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vtg.auto.utilities;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import org.apache.commons.codec.binary.Base64;


public class PasswordEncoder extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Creates new form PasswordEncoder
	 */

	public PasswordEncoder() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPasswordLabel = new javax.swing.JLabel();
		jEncodedLabel = new javax.swing.JLabel();
		jEncodedTextField = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		jDescriptionText = new javax.swing.JTextArea();
		jPasswordField = new javax.swing.JPasswordField();
		jGenerateButton = new javax.swing.JButton();
		jCopyButton = new javax.swing.JButton();
		jCloseButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Password Encoder");

		jPasswordLabel.setText("Password:");

		jEncodedLabel.setText("Encoded string:");

		jEncodedTextField.setEditable(false);
		jEncodedTextField.setEnabled(false);

		jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		jScrollPane1.setEnabled(false);

		jDescriptionText.setBackground(new java.awt.Color(240, 240, 240));
		jDescriptionText.setColumns(20);
		jDescriptionText.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
		jDescriptionText.setLineWrap(true);
		jDescriptionText.setRows(5);
		jDescriptionText
				.setText("Enter the password in 'Password' box and click 'Generate' to generate encoded string");
		jDescriptionText.setWrapStyleWord(true);
		jDescriptionText.setAutoscrolls(false);
		jScrollPane1.setViewportView(jDescriptionText);

		jPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				jPasswordFieldKeyTyped(evt);
			}
		});

		jGenerateButton.setText("Generate");
		jGenerateButton.setEnabled(false);
		jGenerateButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jGenerateButtonActionPerformed(evt);
			}
		});

		jCopyButton.setText("Copy");
		jCopyButton.setEnabled(false);
		jCopyButton.setMaximumSize(new java.awt.Dimension(77, 23));
		jCopyButton.setMinimumSize(new java.awt.Dimension(77, 23));
		jCopyButton.setPreferredSize(new java.awt.Dimension(77, 23));
		jCopyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCopyButtonActionPerformed(evt);
			}
		});

		jCloseButton.setText("Close");
		jCloseButton.setMaximumSize(new java.awt.Dimension(77, 23));
		jCloseButton.setMinimumSize(new java.awt.Dimension(77, 23));
		jCloseButton.setPreferredSize(new java.awt.Dimension(77, 23));
		jCloseButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCloseButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
								.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jEncodedLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jEncodedTextField).addComponent(jPasswordField,
												javax.swing.GroupLayout.PREFERRED_SIZE, 239,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(layout.createSequentialGroup().addGap(24, 24, 24).addComponent(jGenerateButton)
								.addGap(29, 29, 29)
								.addComponent(jCopyButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(22, 22, 22)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jEncodedLabel)
								.addComponent(jEncodedTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 37,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jGenerateButton)
								.addComponent(jCopyButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jGenerateButtonActionPerformed
																					// Check if text is available to
																					// encode
		@SuppressWarnings("deprecation")
		String strPassword = jPasswordField.getText();
		if (strPassword.length() > 0) {
			jEncodedTextField.setText(encode(strPassword));
			jCopyButton.setEnabled(true);
			jCloseButton.setEnabled(true);
			jEncodedTextField.setEnabled(true);
		}
	}// GEN-LAST:event_jGenerateButtonActionPerformed

	private void jPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jPasswordFieldKeyTyped
																		// TODO add your handling code here:
		char[] strPassword = jPasswordField.getPassword();
		if (strPassword.length > 0) {
			jGenerateButton.setEnabled(true);
		} else {
			jGenerateButton.setEnabled(false);
			jCopyButton.setEnabled(false);
		}
		jEncodedTextField.setEnabled(false);
		jEncodedTextField.setText(null);
	}// GEN-LAST:event_jPasswordFieldKeyTyped

	private void jCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCopyButtonActionPerformed
																				// TODO add your handling code here:
		String myString = jEncodedTextField.getText();
		StringSelection stringSelection = new StringSelection(myString);
		Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
		clpbrd.setContents(stringSelection, null);

	}// GEN-LAST:event_jCopyButtonActionPerformed

	private void jCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCloseButtonActionPerformed
																				// TODO add your handling code here:
		this.dispose();
	}// GEN-LAST:event_jCloseButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public void passwardEncoderMain() {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf. html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PasswordEncoder.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PasswordEncoder.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PasswordEncoder.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PasswordEncoder.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PasswordEncoder().setVisible(true);
			}
		});
	}

	// Encode Function
	private String encode(String strString) {
		String strEncodedString = null;
		try {
			strEncodedString = new String(Base64.encodeBase64(strString.getBytes()));
			return strEncodedString;
		} catch (Exception ioe) {

		}
		return strEncodedString;
	}

	public String decode(String strEncodedString) {
		String strActualString = null;
		try {
			strActualString = new String(Base64.decodeBase64(strEncodedString.getBytes()));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return strActualString;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jCloseButton;
	private javax.swing.JButton jCopyButton;
	private javax.swing.JTextArea jDescriptionText;
	private javax.swing.JLabel jEncodedLabel;
	private javax.swing.JTextField jEncodedTextField;
	private javax.swing.JButton jGenerateButton;
	private javax.swing.JPasswordField jPasswordField;
	private javax.swing.JLabel jPasswordLabel;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables
}
